buildscript {
    repositories {
        jcenter()
        maven { url 'http://download.crashlytics.com/maven' }
    }
    dependencies {
        classpath 'org.robolectric:robolectric-gradle-plugin:0.13.2'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.14.3'
    }
}


apply plugin: 'com.android.application'
apply plugin: 'crashlytics'
apply plugin: 'robolectric'

repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}


android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "kanzhihu.android"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        release {
            try {
                storeFile file("kanzhihu.keystore")
                storePassword KEYSTORE_PASSWORD
                keyAlias "android.keystore"
                keyPassword KEY_PASSWORD
            } catch (ex) {
                ////throw new InvalidUserDataException(
                 //   "You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }

            applicationVariants.all { variant -> appendVersionNameVersionCode(variant, defaultConfig)
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
        }
        release {
            File file = new File("./app", "kanzhihu.keystore")
            if (file.exists()) {
                //如果有keystore存在，则进行执行的签名打包
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.0@aar'
    compile 'com.android.support:cardview-v7:21.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.0'
    //view Initialize
    compile 'com.jakewharton:butterknife:6.0.0'
    //background thread
    compile 'com.path:android-priority-jobqueue:1.1.2'
    //event handler
    compile 'de.greenrobot:eventbus:2.4.0'
    //network request
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    //load image
    compile 'com.squareup.picasso:picasso:2.4.0'
    //html parse
    compile 'org.jsoup:jsoup:1.8.1'
    //toolbar
    compile 'com.github.ksoichiro:android-observablescrollview:1.2.0'
    //dialog
    compile 'com.afollestad:material-dialogs:0.0.9'

    androidTestCompile('junit:junit:4.11')
    androidTestCompile('org.robolectric:robolectric:2.3') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'
    }
    compile 'com.crashlytics.android:crashlytics:1.+'
}

robolectric {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'

    // configure max heap size of the test JVM
    maxHeapSize = '2048m'

    // configure the test JVM arguments
    jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'


    // configure whether failing tests should fail the build
    ignoreFailures true

    // use afterTest to listen to the test execution results
    afterTest { descriptor, result -> println "Executing test for ${descriptor.name} with result: ${result.resultType}"
    }
}

def appendVersionNameVersionCode(variant, defaultConfig) {
    //check if staging variant
    if (variant.name == android.buildTypes.release.name) {
        if (variant.zipAlign) {
            def file = variant.outputFile
            def fileName = file.name.replace(".apk", "-" + defaultConfig.versionName + ".apk")
            variant.outputFile = new File(file.parent, fileName)
        }

        def file = variant.packageApplication.outputFile
        //def fileName = file.name.replace(".apk", "-" + defaultConfig.versionName + ".apk")
        def fileName = "KanZhihu" + "-" + defaultConfig.versionName + ".apk";
        variant.packageApplication.outputFile = new File(file.parent, fileName)
    }
}